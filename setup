#!/bin/bash

# Function to print colored text
pprint() {
    local cred='\033[0;31m'
    local cgreen='\033[0;32m'
    local cyellow='\033[0;33m'
    local cblue='\033[0;34m'
    local cpurple='\033[0;35m'
    local color="$cpurple"
    [ ! -z "$2" ] && eval "color=\"\$$2\""
    printf "$color$1\033[0m\n"
}

# Function to reset color
color_reset() { printf '\033[0m'; }

# Yes/No prompt function
yesnoprompt() {
    read -p " [y/n]: " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]]
}

# System Update Function
update_system() {
    pprint "\nUpdating package list... " "cblue"
    sudo apt update &>/dev/null
    if [ $? -eq 0 ]; then
        pprint "System updated successfully!" "cgreen"
    else
        pprint "Failed to update system!" "cred"
        exit 1
    fi

    if apt list --upgradable 2>/dev/null | grep -q "upgradable"; then
        pprint "Updates available. Do you want to upgrade? (y/n)" "cyellow"
        if yesnoprompt; then
            pprint "Upgrading packages... " "cblue"
            sudo apt upgrade -y &>/dev/null && pprint "Upgrade complete!" "cgreen" || pprint "Upgrade failed!" "cred"
        else
            pprint "Skipping upgrade." "cyellow"
        fi
    else
        pprint "All packages are already up to date." "cgreen"
    fi
}

# Package Installation
install_packages() {
    for pkg in python3-pip ffmpeg; do
        if ! command -v "$pkg" &>/dev/null; then
            pprint "Installing $pkg..." "cblue"
            sudo apt install -y "$pkg" &>/dev/null && pprint "$pkg installed successfully!" "cgreen" || pprint "Failed to install $pkg!" "cred"
        else
            pprint "$pkg is already installed." "cgreen"
        fi
    done
}

# Node.js Installation
install_node() {
    if ! command -v npm &>/dev/null; then
        pprint "Installing Node.js and npm... " "cblue"
        curl -fsSL https://deb.nodesource.com/setup_19.x | sudo -E bash - &>/dev/null
        sudo apt install -y nodejs &>/dev/null && sudo npm i -g npm &>/dev/null
        pprint "Node.js and npm installed successfully!" "cgreen"
    else
        pprint "Node.js and npm are already installed." "cgreen"
    fi
}

# Install Python Dependencies
install_python_dependencies() {
    pprint "Installing Python dependencies... " "cblue"
    pip3 install -U pip &>/dev/null
    pip3 install -U -r requirements.txt &>/dev/null && pprint "Dependencies installed successfully!" "cgreen" || pprint "Failed to install dependencies!" "cred"
}

# User Input for Environment Variables
collect_env_vars() {
    clear
    pprint "Welcome to YorXMusic Setup Installer!" "cblue"
    pprint "If any errors occur, check the log files: " "cyellow"
    pprint "  - Node.js logs: nodelog.txt" "cyellow"
    pprint "  - Python package logs: pypilog.txt\n" "cyellow"
    sleep 1

    pprint "Enter your API credentials below:\n" "cpurple"
    pprint "API ID: "; color_reset; read api_id
    pprint "API HASH: "; color_reset; read api_hash
    pprint "BOT TOKEN: "; color_reset; read bot_token
    pprint "OWNER ID: "; color_reset; read owner_id
    pprint "MONGO DB URI: "; color_reset; read mongo_db
    pprint "LOG GROUP ID: "; color_reset; read logger
    pprint "STRING SESSION: "; color_reset; read string_session

    pprint "\nSaving your credentials..." "cblue"

    # Save environment variables
    cat > .env <<EOF
API_ID = $api_id
API_HASH = $api_hash
BOT_TOKEN = $bot_token
MONGO_DB_URI = $mongo_db
LOGGER_ID = $logger
STRING_SESSION = $string_session
OWNER_ID = $owner_id
EOF

    pprint "\nConfiguration saved successfully!" "cgreen"
}

# Run all functions
clear
pprint "ðŸš€ YorXMusic Installer ðŸš€" "cpurple"
update_system
install_packages
install_node
install_python_dependencies
collect_env_vars

pprint "\nðŸŽ¶ YorXMusic has been installed successfully! ðŸŽ¶" "cgreen"
pprint "To start your bot, run: bash start\n" "cblue"
